Arrays
------

An array is a collection of values of the same type, stored in contiguous memory locations.
Think of it as a row of storage boxes, each holding one value, all of the same type.

Arrays allow you to store multiple values in a single variable instead of 
declaring many variables:

int num1, num2, num3;  

You can use an array:

int[] numbers = new int[3];

CHARACTERISTICS OF ARRAYS
-------------------------

- Fixed Size: The size of an array cannot be changed once it is created.
- Zero-based Indexing: The first element is at index 0.
- Homogeneous: All elements must be of the same type (usualy).
- Can store any data type (Primitives/objects/other arrays)
- No built-in methods

DECLARING AN ARRAY
-------------------

type[] arrayName;   -- Preferred
type arrayName[];   -- Also valid

Example:

int[] numbers;  // Declares an array of integers

INITIALIZING AN ARRAY
---------------------

arrayName = new type[size];

Example:

int[] numbers;
numbers = new int[5];  -- Creates an array of size 5 -- why can it be initialized without data?

Declaring and Initializing in One Step:

int[] numbers = new int[3];  // Array of size 3

Using Array Literals:

int[] numbers = {10, 20, 30};  -- Direct initialization

DEFAULT values
--------------

If you dont use a literal (direct initialization), defualt values are used:
- int : 0
- float : 0.0
- boolean : false
- char : '\u0000'('0')
- object: null

ACCESSING AND MODIFYYING ARRAY ELEMENTS
---------------------------------------

Use the index to access elements.

Example:

int[] numbers = {10, 20, 30};
System.out.println(numbers[0]);  -- Outputs: 10

Modifying Elements

Example:

numbers[1] = 25;  -- Changes the second element to 25

ARRAY LENGTH
------------

Use the length property to find the size of an array.

Example:

System.out.println(numbers.length);  -- Outputs: 3

ITERATING OVER ARRAYS
---------------------

Using a for Loop:

for (int i = 0; i < numbers.length; i++) {
    System.out.println(numbers[i]);
}

Using an Enhanced for Loop (For-Each):

for (int num : numbers) {
    System.out.println(num);
}

ARRAYS OF OBJECTS
-----------------

Arrays can store references to objects:

Example:

String[] words = {"Hello", "World"};
System.out.println(words[0]);  -- Outputs: Hello

MULTIDIMENSIONAL ARRAYS
-----------------------

A Multidimensional Array is an array of arrays (e.g., a 2D table or matrix).

Example:

int[][] matrix = {
    {1, 2, 3},
    {4, 5, 6},
    {7, 8, 9}
};

Accessing Elements:

System.out.println(matrix[1][2]);  -- Outputs: 6

Iterating:

for (int i = 0; i < matrix.length; i++) {
    for (int j = 0; j < matrix[i].length; j++) {
        System.out.print(matrix[i][j] + " ");
    }
    System.out.println();
}

Jagged arrays:

If the rows have different lengths then its a jagged array. This can potentially
save memory. 

Example:

int[][] jaggedArray = {
    {1, 2},
    {3, 4, 5},
    {6}
};
System.out.println(jaggedArray[1][2]);  -- Outputs: 5

COMMON ARRAY OPERATIONS
-----------------------

Copying Arrays:

- Manual Copy:

int[] source = {1, 2, 3};
int[] destination = new int[source.length];
for (int i = 0; i < source.length; i++) {
    destination[i] = source[i];
}

- Using Arrays.copyOf (copies values automatically):

int[] copy = Arrays.copyOf(source, source.length);

Sorting Arrays:

- Use Arrays.sort():

import java.util.Arrays;
int[] numbers = {4, 2, 7, 1};
Arrays.sort(numbers);
System.out.println(Arrays.toString(numbers));  -- Outputs: [1, 2, 4, 7]

HOW ARRAYS WORK IN MEMORY
-------------------------

Arrays of Primitives:
- The array object is stored in the heap.
- Primitive values are stored directly in the contiguous memory 
  allocated for the array in the heap.

Arrays of Objects:
- The array object is stored in the heap.
- The array contains references (pointers) to the actual objects, 
  which are also in the heap.

AVOID OUT-OF-BOUNDS
-------------------

Accessing Out of Bounds:

int[] numbers = {1, 2, 3};
System.out.println(numbers[3]);  // Error: ArrayIndexOutOfBoundsException


WHEN TO USE ARRAYS 
------------------

- When size is fixed and performance is critical. 
- Rezizing requires new blocks of memory to be allocated, 
  copy the contents of an array and garbage collection.
- Fixed size gives us predictable performance. 
- Arrays are best for primitives in terms of performance.
- Memory efficiant.
- Old so lots of legacy code will use them. 

DIFFERENCES IN C#
-----------------

- Declaring arrays [] must be after type.
- Accessing length property in c# use capital Length.
- Jagged arrays can also be rectangular in C#:
    int[,] matrix = {
        {1, 2, 3},
        {4, 5, 6},
        {7, 8, 9}
    };
- c# uses Array.Sort() not Arrays.sort()
- c# uses Array.Copy() and/or Clone().